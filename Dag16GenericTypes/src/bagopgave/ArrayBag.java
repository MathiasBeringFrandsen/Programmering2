package bagopgave;import java.util.Arrays;public class ArrayBag<T> implements Bag<T> {    private T[] bag;    private int size;    public ArrayBag() {        this.bag = (T[]) new Object[10];        this.size = 0;    }    @Override    public int getCurrentSize() {        return this.size;    }    @Override    public boolean isFull() {        return size == bag.length;    }    @Override    public boolean isEmpty() {        return size == 0;    }    @Override    public boolean add(T newEntry) {        boolean added = false;        int i = 0;        while (!added && i < bag.length) {            if (bag[i] == null) {                bag[i] = newEntry;                added = true;                size++;            } else {                i++;            }        }        return added;    }    @Override    public T remove() {        T removedItem = null;        boolean found = false;        int i = 9;        while (i >= 0 && !found) {            if (bag[i] != null) {                removedItem = bag[i];                bag[i] = null;                found = true;                size--;            } else {                i--;            }        }        return removedItem;    }    @Override    public boolean remove(T anEntry) {        boolean removed = false;        int i = 0;        while (!removed && i < bag.length) {            if (bag[i].equals(anEntry)) {                bag[i] = null;                removed = true;                size--;            } else {                i++;            }        }        return removed;    }    @Override    public void clear() {        this.size = 0;        Arrays.fill(bag, null);    }    @Override    public int getFrequencyOf(T anEntry) {        int freq = 0;        for (T object : bag) {            if (anEntry.equals(object)) {                freq++;            }        }        return freq;    }    @Override    public boolean contains(T anEntry) {        boolean isThere = false;        int i = 0;        while (i < bag.length && !isThere)            if (anEntry.equals(bag[i])) {                isThere = true;            } else {                i++;            }        return isThere;    }    @Override    public T[] toArray() {        T[] outArray = (T[]) new Object[size];        int j = 0;        for (int i = 0; i< bag.length; i++){            if (bag[i] != null){                outArray[i] = bag[i];                j++;            }        }        return outArray;    }}